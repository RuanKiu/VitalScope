{"version":3,"sources":["oximeter.jpeg","PFM.jpeg","vitalscope.png","components/Data.js","components/Home.js","components/User.js","components/Groups.js","App.js","index.js"],"names":["module","exports","Data","useState","FName","LName","heartRate","spo2","undefined","pefr","respRate","groupName","inputs","setInputs","togHeart","setTH","togResp","setTR","togpefr","setTP","togspo2","setTS","onChangeInput","e","target","name","value","error","console","log","onSubmitform","a","preventDefault","body","fetch","method","JSON","stringify","headers","response","json","toast","success","document","getElementById","reset","className","onSubmit","id","htmlFor","onChange","required","autoCapitalize","minLength","type","onClick","placeholder","src","Oximeter","PFM","Home","groupCode","onSubmitForm","parsed","Logo","autoComplete","User","patientId","setChange","biggestChanges","toggle","setToggle","data","setData","getInfo","useEffect","length","Hdiff","Rdiff","Sdiff","Pdiff","HRDiff","RRDiff","pefrDiff","spo2Diff","i","Math","abs","heartrate","resprate","changeInfo","heartInfo","respInfo","pefrInfo","spo2Info","PDiff","SDiff","HDiff","RDiff","push","findChange","heartRatePoints","map","datapoint","x","Date","datadate","y","respRatePoints","pefrPoints","filter","spo2Points","ctx1","getContext","ctx2","Chart","datasets","label","backgroundColor","pointBackgroundColor","pointBorderColor","pointRadius","pointHoverRadius","options","aspectRatio","layout","padding","left","right","top","bottom","scales","xAxes","Groups","creds","setCreds","patients","setPatients","allData","setAllData","mHeart","setMH","mResp","setMR","mpefr","setMP","mspo2","setMS","maxHeart","setMaxHeart","maxResp","setMaxResp","average","datapoints","sum","getAllData","getMaxes","heartRateArray","respRateArray","pefrArray","spo2Array","split","patient","key","patientid","fname","lname","App","to","exact","path","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b9f008a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/oximeter.69a786ff.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/PFM.6490903b.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/vitalscope.db1f801d.png\";","import React, { Fragment, useState } from \"react\";\nimport Oximeter from \"../oximeter.jpeg\";\nimport PFM from \"../PFM.jpeg\";\nimport { toast } from \"react-toastify\";\n\nfunction Data() {\n  const [inputs, setInputs] = useState({\n    FName: \"\",\n    LName: \"\",\n    heartRate: 0,\n    spo2: undefined,\n    pefr: undefined,\n    respRate: 0,\n    groupName: \"\",\n  });\n\n  const [togHeart, setTH] = useState(false);\n  const [togResp, setTR] = useState(false);\n  const [togpefr, setTP] = useState(false);\n  const [togspo2, setTS] = useState(false);\n\n  const onChangeInput = (e) => {\n    try {\n      setInputs({\n        ...inputs,\n        [e.target.name]: e.target.value,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onSubmitform = async (e) => {\n    e.preventDefault();\n    try {\n      const body = {\n        ...inputs,\n      };\n      const response = await fetch(\"/server/data/\", {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        headers: { \"Content-Type\": \"Application/json\" },\n      });\n      const parsed = await response.json();\n      if (parsed === \"This group doesn't exist!\") {\n        toast.error(\"This group doesn't exist!\");\n      } else {\n        toast.success(\"Data Entered\");\n      }\n      document.getElementById(\"data-form\").reset();\n    } catch (error) {\n      toast.error(\"This group doesn't exist!\");\n\n      console.log(error);\n    }\n  };\n\n  return (\n    <Fragment>\n      <div className=\"main\">\n        <div className=\"title my-15\">\n          <h1>Add Data</h1>\n        </div>\n\n        <div className=\"main\"></div>\n        <form onSubmit={(e) => onSubmitform(e)} id=\"data-form\">\n          <div className=\"form-content my-10\">\n            <div className=\"formcontrol my-5\">\n              <label htmlFor=\"Fname\">First Name</label>\n              <input\n                name=\"FName\"\n                onChange={(e) => onChangeInput(e)}\n                required\n                autoCapitalize=\"off\"\n                minLength=\"2\"\n              ></input>\n            </div>\n\n            <div className=\"formcontrol my-5\">\n              <label htmlFor=\"LName\">Last Name</label>\n              <input\n                name=\"LName\"\n                onChange={(e) => onChangeInput(e)}\n                required\n                autoCapitalize=\"off\"\n                minLength=\"2\"\n              ></input>\n            </div>\n            <div className=\"formcontrol my-5\">\n              <label htmlFor=\"heartRate\">Heart Rate</label>\n              <input\n                name=\"heartRate\"\n                onChange={(e) => onChangeInput(e)}\n                required\n                type=\"number\"\n              ></input>\n            </div>\n            <button\n              className=\"help-button\"\n              onClick={(e) => {\n                togHeart ? setTH(false) : setTH(true);\n              }}\n              type=\"button\"\n            >\n              ?\n            </button>\n            {togHeart && (\n              <div className=\"text my-5\">\n                <p>\n                  Put your index and middle finger to the left of your windpipe\n                  where your neck connects to the tissues underneath your jaw.\n                  You should be able to feel your pulse on either side of your\n                  windpipe, but it might be easier to find on the left side. You\n                  may need to move your fingers around and press a little harder\n                  until you feel it. Use a clock or stopwatch to keep track of\n                  15 seconds, count the pulses you feel, and then multiply by\n                  four. You should get about the same result when you measure\n                  your pulse at your wrist or your neck.\n                </p>\n              </div>\n            )}\n            <div className=\"formcontrol my-5\">\n              <label htmlFor=\"respRate\">Respiratory Rate</label>\n              <input\n                name=\"respRate\"\n                onChange={(e) => onChangeInput(e)}\n                required\n                type=\"number\"\n              ></input>\n            </div>\n            <button\n              className=\"help-button\"\n              onClick={(e) => {\n                togResp ? setTR(false) : setTR(true);\n              }}\n              type=\"button\"\n            >\n              ?\n            </button>\n            {togResp && (\n              <div className=\"text my-5\">\n                <p>\n                  Your respiratory rate is also known as your breathing rate.\n                  This is the number of breaths you take per minute. You can\n                  measure your breathing rate by counting the number of breaths\n                  you take over the course of one minute while you're at rest.\n                </p>\n              </div>\n            )}\n            <div className=\"formcontrol my-5\">\n              <label htmlFor=\"spo2\">Blood Oxygen Saturation</label>\n              <input\n                name=\"spo2\"\n                onChange={(e) => onChangeInput(e)}\n                placeholder=\"Optional\"\n                type=\"number\"\n              ></input>\n            </div>\n            <button\n              className=\"help-button\"\n              onClick={(e) => {\n                togspo2 ? setTS(false) : setTS(true);\n              }}\n              type=\"button\"\n            >\n              ?\n            </button>\n            {togspo2 && (\n              <div className=\"text my-5\">\n                <p>\n                  Your blood oxygen level is a measure of how much oxygen your\n                  red blood cells are carrying. Maintaining the precise balance\n                  of oxygen-saturated blood is vital to your health.<br></br>A\n                  pulse oximeter (pulse ox) is a noninvasive device that\n                  estimates the amount of oxygen in your blood. To use it,\n                  simply clip it on your finger or earlobe and wait for a\n                  minute. The reading that appears indicates what percentage of\n                  your blood is saturated, known as the SpO2 level.\n                </p>\n                <img src={Oximeter} className=\"image rounded\"></img>\n              </div>\n            )}\n            <div className=\"formcontrol my-5\">\n              {\" \"}\n              <label htmlFor=\"pefr\">Peak Expiratory Flow Rate</label>\n              <input\n                name=\"pefr\"\n                onChange={(e) => onChangeInput(e)}\n                placeholder=\"Optional\"\n                type=\"number\"\n              ></input>\n            </div>\n            <button\n              className=\"help-button\"\n              onClick={(e) => {\n                togHeart ? setTP(false) : setTP(true);\n              }}\n              type=\"button\"\n            >\n              ?\n            </button>\n            {togpefr && (\n              <div className=\"text my-5\">\n                <p>\n                  Peak flow measurement is a quick test to measure air flowing\n                  out of the lungs. The measurement is also called the peak\n                  expiratory flow rate (PEFR) or the peak expiratory flow\n                  (PEF).During the test, you blow forcefully into the mouthpiece\n                  of a device. A peak flow meter (PFM) is used most often. This\n                  is a small handheld device made of plastic. A PFM is small and\n                  light enough to be used almost anywhere. It’s important to use\n                  the same PFM on a regular basis. The readings can vary between\n                  brands and types of meters.\n                </p>\n                <img className=\"image rounded\" src={PFM}></img>\n              </div>\n            )}\n            <div className=\"formcontrol my-5\">\n              <label htmlFor=\"groupName\">Group Name</label>\n              <input\n                name=\"groupName\"\n                onChange={(e) => onChangeInput(e)}\n                required\n                autoCapitalize=\"off\"\n                minLength=\"2\"\n              ></input>\n            </div>\n            <button type=\"submit\" className=\"form-button my-5\">\n              &raquo;\n            </button>\n          </div>\n        </form>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Data;\n","import React, { Fragment, useState } from \"react\";\nimport Logo from \"../vitalscope.png\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction Home() {\n  const [inputs, setInputs] = useState({\n    groupCode: \"\",\n    groupName: \"\",\n  });\n\n  const { groupName, groupCode } = inputs;\n\n  const onChangeInput = (e) => {\n    try {\n      setInputs({\n        ...inputs,\n        [e.target.name]: e.target.value,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onSubmitForm = async (e) => {\n    e.preventDefault();\n\n    const body = {\n      ...inputs,\n    };\n    const response = await fetch(\"/server/groups\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"Application/json\" },\n      body: JSON.stringify(body),\n    });\n    const parsed = await response.json();\n    if (parsed === \"This group already exists!\") {\n      toast.error(parsed);\n    } else {\n      toast.success(\"Group Created!\");\n    }\n    setInputs({\n      groupCode: \"\",\n      groupName: \"\",\n    });\n  };\n\n  return (\n    <Fragment>\n      <div className=\"main\">\n        <img src={Logo} className=\"image\"></img>\n\n        <div className=\"title my-20\">\n          <h1>VitalScope</h1>\n        </div>\n        <div className=\"text px-10\">\n          <p>\n            VitalScope is a tool that helps doctors and nurses track vitals\n            after a patient has recovered.<br></br>By monitoring patients'\n            health data, disease and sickness can be detected early and\n            reinfection can be prevented.\n          </p>\n        </div>\n        <div className=\"title-thin my-20\">\n          <h2>Quickstart Guide</h2>\n        </div>\n\n        <div className=\"text my-5 px-10\">\n          <h3>For Physicians and Medical Staff</h3>\n          <p>\n            To begin, create a monitoring group for patients to join. <br></br>\n            Choose a name and a group code; the code will be used to view your\n            patient's data, so keep it confidential.\n          </p>\n        </div>\n        <form id=\"data-form\" onSubmit={(e) => onSubmitForm(e)}>\n          <div className=\"form-content my-10\">\n            <div className=\"formcontrol my-5\">\n              <label htmlFor=\"groupName\">Your Monitoring Group's Name</label>\n              <input\n                name=\"groupName\"\n                value={groupName}\n                onChange={(e) => onChangeInput(e)}\n                autoCapitalize=\"off\"\n                autoComplete=\"off\"\n                required\n                minLength=\"2\"\n              ></input>\n            </div>\n            <div className=\"formcontrol my-5\">\n              <label htmlFor=\"groupCode\">Your Monitoring Group's Code</label>\n              <input\n                name=\"groupCode\"\n                value={groupCode}\n                onChange={(e) => onChangeInput(e)}\n                autoCapitalize=\"off\"\n                autoComplete=\"off\"\n                required\n                minLength=\"2\"\n              ></input>\n            </div>\n\n            <button className=\"form-button\" type=\"submit\">\n              +\n            </button>\n          </div>\n        </form>\n        <div className=\"text my-5 px-10\">\n          <h3>For Patients</h3>\n          <p>\n            Adding and submitting data is quick and simple; head over to the\n            'Add Data' page,<br></br> then follow the instructions to obtain\n            your vitals\n          </p>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Home;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Chart from \"chart.js\";\n\nfunction User({\n  patientId,\n  groupCode,\n  groupName,\n  setChange,\n  biggestChanges,\n  FName,\n  LName,\n}) {\n  const [toggle, setToggle] = useState(false);\n  const [data, setData] = useState([]);\n\n  const toggleView = () => {\n    if (toggle) {\n      setToggle(false);\n    } else {\n      setToggle(true);\n    }\n  };\n\n  const getInfo = async () => {\n    try {\n      const body = {\n        patientId: patientId,\n        groupCode: groupCode,\n        groupName: groupName,\n      };\n      const response = await fetch(\"/server/patients\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"Application/json\" },\n        body: JSON.stringify(body),\n      });\n      const parsed = await response.json();\n      setData(parsed);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const findChange = () => {\n    if (!data || data.length === 0) return;\n\n    let Hdiff = 0;\n    let Rdiff = 0;\n    let Sdiff = 0;\n    let Pdiff = 0;\n    let HRDiff = {};\n    let RRDiff = {};\n    let pefrDiff = {};\n    let spo2Diff = {};\n\n    for (let i = 1; i < data.length; i++) {\n      if (Math.abs(data[i].heartrate - data[i - 1].heartrate) > Hdiff) {\n        Hdiff = Math.abs(data[i].heartrate - data[i - 1].heartrate);\n        HRDiff = data[i];\n      }\n      if (Math.abs(data[i].resprate - data[i - 1].resprate) > Rdiff) {\n        Rdiff = Math.abs(data[i].resprate - data[i - 1].resprate);\n        RRDiff = data[i];\n      }\n      if (Math.abs(data[i].pefr - data[i - 1].pefr) > Pdiff) {\n        Pdiff = Math.abs(data[i].pefr - data[i - 1].pefr);\n        pefrDiff = data[i];\n      }\n      if (Math.abs(data[i].spo2 - data[i - 1].spo2) > Sdiff) {\n        Sdiff = Math.abs(data[i].spo2 - data[i - 1].spo2);\n        spo2Diff = data[i];\n      }\n    }\n\n    const changeInfo = {\n      heartInfo: HRDiff,\n      respInfo: RRDiff,\n      pefrInfo: pefrDiff,\n      spo2Info: spo2Diff,\n      FName: FName,\n      LName: LName,\n      PDiff: Pdiff,\n      SDiff: Sdiff,\n      HDiff: Hdiff,\n      RDiff: Rdiff,\n    };\n\n    const changes = [...biggestChanges];\n    changes.push(changeInfo);\n\n    setChange([...biggestChanges, changeInfo]);\n  };\n\n  //HOOKS\n\n  useEffect(() => {\n    findChange();\n  }, [data]);\n\n  useEffect(() => {\n    getInfo();\n  }, []);\n\n  useEffect(() => {\n    if (!toggle) return;\n    const heartRatePoints = data.map((datapoint) => {\n      const point = {\n        x: new Date(datapoint.datadate),\n        y: datapoint.heartrate,\n      };\n      return point;\n    });\n    const respRatePoints = data.map((datapoint) => {\n      const point = {\n        x: new Date(datapoint.datadate),\n        y: datapoint.resprate,\n      };\n      return point;\n    });\n    const pefrPoints = data\n      .filter(\n        (datapoint) =>\n          datapoint.pefr !== undefined ||\n          datapoint.pefr !== null ||\n          datapoint.pefr\n      )\n      .map((datapoint) => {\n        const point = {\n          x: new Date(datapoint.datadate),\n          y: datapoint.pefr,\n        };\n        return point;\n      });\n    const spo2Points = data\n      .filter(\n        (datapoint) =>\n          datapoint.spo2 !== undefined ||\n          datapoint.spo2 !== null ||\n          datapoint.spo2\n      )\n      .map((datapoint) => {\n        const point = {\n          x: new Date(datapoint.datadate),\n          y: datapoint.spo2,\n        };\n        return point;\n      });\n\n    //MANAGING CHARTS\n\n    const ctx1 = document.getElementById(\"chart\").getContext(\"2d\");\n    const ctx2 = document.getElementById(\"chart-2\").getContext(\"2d\");\n\n    const chart1 = new Chart(ctx1, {\n      type: \"line\",\n      data: {\n        datasets: [\n          {\n            label: \"Heart Rate (Beats Per Minute)\",\n            data: heartRatePoints,\n            backgroundColor: \"rgba(221, 63, 63, 0.7)\",\n            pointBackgroundColor: \"rgba(221, 63, 63, 0.5)\",\n            pointBorderColor: \"rgba(221, 63, 63, 1)\",\n            pointRadius: 7,\n            pointHoverRadius: 13,\n          },\n          {\n            label: \"Respiratory Rate (Breaths Per Minute)\",\n            data: respRatePoints,\n            backgroundColor: \"rgba(63, 79, 221, 0.7)\",\n            pointBackgroundColor: \"rgba(63, 79, 221, 0.5)\",\n            pointBorderColor: \"gba(63, 79, 221, 1)\",\n            pointRadius: 10,\n            pointHoverRadius: 15,\n          },\n        ],\n      },\n      options: {\n        aspectRatio: 1,\n\n        layout: {\n          padding: {\n            left: 10,\n            right: 10,\n            top: 20,\n            bottom: 20,\n          },\n        },\n        scales: {\n          xAxes: [\n            {\n              type: \"time\",\n            },\n          ],\n        },\n      },\n    });\n    const chart2 = new Chart(ctx2, {\n      type: \"line\",\n      data: {\n        datasets: [\n          {\n            label: \"Peak Expiratory Flow Rate\",\n            data: pefrPoints,\n            backgroundColor: \"rgba(218, 221, 63, 0.7)\",\n            pointBackgroundColor: \"rgba(218, 221, 63, 0.5)\",\n            pointBorderColor: \"rgba(218, 221, 63, 1)\",\n            pointRadius: 7,\n            pointHoverRadius: 13,\n          },\n          {\n            label: \"Blood-Oxygen Saturation\",\n            data: spo2Points,\n            backgroundColor: \"rgba(221, 100, 63, 0.7)\",\n            pointBackgroundColor: \"rgba(221, 100, 63, 0.5)\",\n            pointBorderColor: \"rgba(221, 100, 63, 1)\",\n            pointRadius: 7,\n            pointHoverRadius: 13,\n          },\n        ],\n      },\n      options: {\n        aspectRatio: 1,\n        layout: {\n          padding: {\n            left: 10,\n            right: 10,\n            top: 20,\n            bottom: 20,\n          },\n        },\n        scales: {\n          xAxes: [\n            {\n              type: \"time\",\n            },\n          ],\n        },\n      },\n    });\n  }, [data, toggle]);\n\n  return (\n    <Fragment>\n      <div className=\"container my-10\">\n        <div className=\"title-thin my-10\">\n          <h2>\n            {FName}, {LName}\n          </h2>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"help-button\"\n          onClick={(e) => toggleView()}\n        >\n          Info\n        </button>\n\n        {toggle && (\n          <div className=\"charts\">\n            <canvas id=\"chart\"></canvas>\n            <canvas id=\"chart-2\"></canvas>\n          </div>\n        )}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default User;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport User from \"./User\";\nimport { toast } from \"react-toastify\";\n\nfunction Groups() {\n  const [inputs, setInputs] = useState({\n    groupName: \"\",\n    groupCode: \"\",\n  });\n\n  const [biggestChanges, setChange] = useState([]);\n\n  const [creds, setCreds] = useState({});\n\n  const [patients, setPatients] = useState([]);\n\n  const [allData, setAllData] = useState([]);\n\n  const { groupName, groupCode } = inputs;\n\n  const [mHeart, setMH] = useState(undefined);\n  const [mResp, setMR] = useState(undefined);\n  const [mpefr, setMP] = useState(undefined);\n  const [mspo2, setMS] = useState(undefined);\n\n  const [maxHeart, setMaxHeart] = useState(undefined);\n  const [maxResp, setMaxResp] = useState(undefined);\n\n  const onChangeInput = (e) => {\n    try {\n      setInputs({\n        ...inputs,\n        [e.target.name]: e.target.value,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onSubmitForm = async (e) => {\n    e.preventDefault();\n    try {\n      const body = {\n        ...inputs,\n      };\n      const response = await fetch(\"/server/groups/users\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"Application/json\" },\n        body: JSON.stringify(body),\n      });\n\n      const parsed = await response.json();\n      if (parsed === \"This group doesn't exist\") {\n        toast.error(\"This group does not exist\");\n        setInputs({\n          groupName: \"\",\n          groupCode: \"\",\n        });\n        return;\n      }\n      setPatients(parsed);\n      setCreds({\n        ...inputs,\n      });\n      setInputs({\n        groupName: \"\",\n        groupCode: \"\",\n      });\n    } catch (error) {\n      toast.error(\"Incorrect group code.\");\n      console.log(error);\n    }\n  };\n\n  const average = (datapoints) => {\n    try {\n      let sum = 0;\n      for (let i = 0; i < datapoints.length; i++) {\n        sum = sum + datapoints[i];\n      }\n      return sum / datapoints.length;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getAllData = async () => {\n    try {\n      const body = {\n        ...creds,\n      };\n      const response = await fetch(\"/server/data/all\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"Application/json\" },\n        body: JSON.stringify(body),\n      });\n      const parsed = await response.json();\n      setAllData(parsed);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const analyzeChanges = () => {\n    if (!biggestChanges.length > 0 || !biggestChanges) return;\n\n    setMaxHeart(biggestChanges[0]);\n    setMaxResp(biggestChanges[0]);\n  };\n\n  const getMaxes = () => {\n    if (!maxHeart || maxHeart === {} || !maxResp || maxResp === {}) return;\n    for (let i = 0; i < biggestChanges.length; i++) {\n      if (\n        biggestChanges[i].heartInfo.heartrate > maxHeart.heartInfo.heartrate\n      ) {\n        setMaxHeart(biggestChanges[i]);\n      }\n      if (biggestChanges[i].respInfo.resprate > maxResp.respInfo.resprate) {\n        setMaxResp(biggestChanges[i]);\n      }\n    }\n  };\n\n  //HOOKS\n\n  useEffect(() => {\n    getMaxes();\n  }, [maxHeart, maxResp]);\n\n  useEffect(() => {\n    analyzeChanges();\n  }, [biggestChanges]);\n\n  useEffect(() => {\n    getAllData();\n  }, [creds]);\n\n  useEffect(() => {\n    if (allData === \"This group doesn't exist\" || allData.length === 0) return;\n\n    const heartRateArray = allData.map((datapoint) => {\n      return datapoint.heartrate;\n    });\n    setMH(heartRateArray);\n\n    const respRateArray = allData.map((datapoint) => {\n      return datapoint.resprate;\n    });\n    setMR(respRateArray);\n\n    const pefrArray = allData\n      .filter(\n        (datapoint) =>\n          datapoint.pefr !== undefined ||\n          datapoint.pefr !== null ||\n          datapoint.pefr\n      )\n      .map(\n        (datapoint) => {\n          return datapoint.pefr;\n        },\n        [allData]\n      );\n    setMP(pefrArray);\n\n    const spo2Array = allData\n      .filter(\n        (datapoint) =>\n          datapoint.spo2 !== undefined ||\n          datapoint.spo2 !== null ||\n          datapoint.spo2\n      )\n      .map(\n        (datapoint) => {\n          return datapoint.spo2;\n        },\n        [allData]\n      );\n    setMS(spo2Array);\n  }, [allData]);\n\n  return (\n    <Fragment>\n      <div className=\"main\">\n        <div className=\"title my-10\">\n          <h1>Groups</h1>\n        </div>\n        <form id=\"get-data-form\" onSubmit={(e) => onSubmitForm(e)}>\n          <div className=\"form-content my-10\">\n            <div className=\"formcontrol my-5\">\n              <label htmlFor=\"groupName\">Group Name</label>\n              <input\n                type=\"text\"\n                name=\"groupName\"\n                value={groupName}\n                onChange={(e) => onChangeInput(e)}\n                required\n                autoCapitalize=\"off\"\n                minLength=\"2\"\n              ></input>\n            </div>\n            <div className=\"formcontrol my-5\">\n              <label htmlFor=\"groupCode\">Group Code</label>\n              <input\n                type=\"text\"\n                name=\"groupCode\"\n                value={groupCode}\n                onChange={(e) => onChangeInput(e)}\n                required\n                autoCapitalize=\"off\"\n                minLength=\"2\"\n              ></input>\n            </div>\n            <button className=\"form-button\" type=\"submit\">\n              &raquo;\n            </button>\n          </div>\n        </form>\n        {maxHeart &&\n          maxHeart !== undefined &&\n          maxHeart.heartInfo.datadate !== undefined && (\n            <div className=\"center\">\n              <div className=\"title-thin px-5\">\n                <h3>Largest Change in Heart Rate: {maxHeart.HDiff} Be/Min</h3>\n              </div>\n              <div className=\"text my-5\">\n                <p>\n                  {maxHeart.FName} {maxHeart.LName} <br />\n                  {maxHeart.heartInfo.heartrate} Beats Per Minute\n                  <br />\n                  {maxHeart.heartInfo.datadate.split(\"T\")[0]}\n                </p>\n              </div>\n            </div>\n          )}\n        {maxResp &&\n          maxResp !== undefined &&\n          maxResp.respInfo.datadate !== undefined && (\n            <div className=\"center\">\n              <div className=\"title-thin px-5\">\n                <h3>\n                  Largest Change in Respiratory Rate: {maxResp.RDiff} Br/Min\n                </h3>\n              </div>\n              <div className=\"text my-5\">\n                <p>\n                  {maxResp.FName} {maxResp.LName} <br />\n                  {maxResp.respInfo.resprate} Breaths Per Minute\n                  <br />\n                  {maxResp.respInfo.datadate.split(\"T\")[0]}\n                </p>\n              </div>\n            </div>\n          )}\n\n        {mHeart && (\n          <div className=\"title-thin my-5 px-5\">\n            <h4>\n              Average Heart Rate:{\" \"}\n              {average(mHeart) === 0\n                ? \"No Data Yet\"\n                : average(mHeart) + \" Be/Min\"}{\" \"}\n            </h4>\n          </div>\n        )}\n\n        {mResp && (\n          <div className=\"title-thin my-5 px-5\">\n            {\" \"}\n            <h4>\n              Average Respiratory Rate:{\" \"}\n              {average(mResp) === 0\n                ? \"No Data Yet\"\n                : average(mResp) + \" Br/Min\"}{\" \"}\n            </h4>\n          </div>\n        )}\n        {mpefr && (\n          <div className=\"title-thin my-5 px-5\">\n            <h4>\n              Average Peak Expiratory Flow Rate:{\" \"}\n              {average(mpefr) === 0 ? \"No Data Yet\" : average(mpefr) + \" L/Min\"}{\" \"}\n            </h4>\n          </div>\n        )}\n        {mspo2 && (\n          <div className=\"title-thin my-5 px-5\">\n            <h4>\n              Average Blood Oxygen Saturation:{\" \"}\n              {average(mspo2) === 0 ? \"No Data Yet\" : average(mspo2) + \" %\"}\n            </h4>\n          </div>\n        )}\n        {patients && patients.length !== 0 && (\n          <div className=\"title my-10\">\n            <h1>Your Patients</h1>\n          </div>\n        )}\n        {patients &&\n          patients.map((patient) => (\n            <div key={patient.patientid}>\n              <User\n                patientId={patient.patientid}\n                groupCode={groupCode}\n                groupName={groupName}\n                setChange={setChange}\n                biggestChanges={biggestChanges}\n                FName={patient.fname}\n                LName={patient.lname}\n              ></User>\n            </div>\n          ))}\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Groups;\n","import React, { Fragment } from \"react\";\nimport \"./App.css\";\nimport Data from \"./components/Data\";\nimport Home from \"./components/Home\";\nimport Groups from \"./components/Groups\";\nimport User from \"./components/User\";\nimport { Link, Redirect, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <div className=\"nav-bar\">\n        <ul className=\"nav-list\">\n          <li className=\"nav-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to=\"/data\">Add Data</Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to=\"groups\">Monitor Patients</Link>\n          </li>\n        </ul>\n      </div>\n      <Switch>\n        <Route exact path=\"/\" component={Home}></Route>\n        <Route exact path=\"/data\" component={Data}></Route>\n        <Route exact path=\"/groups\" component={Groups}></Route>\n        <Route exact path=\"/patient/:id\" component={User}></Route>\n        <Route path=\"/\">\n          <Redirect to=\"/\"></Redirect>\n        </Route>\n      </Switch>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n      <ToastContainer></ToastContainer>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}